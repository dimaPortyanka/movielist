{"version":3,"sources":["MoviePreview/MoviePreview.module.css","hooks/useRemoteData/RequestStatus.ts","utils/createReducer/createReducer.ts","hooks/useRemoteData/reducer.ts","hooks/useRemoteData/useRemoteData.ts","services/tmdb/tmdb.ts","services/tmdb/getPopular.ts","MoviePreview/MoviePreview.tsx","Root/Popular/Popular.tsx","Root/Popular/PopularContainer.tsx","Root/Root.tsx","index.tsx"],"names":["module","exports","RequestStatus","createReducer","handlers","defaultState","undefined","state","action","type","handler","reducer","status","PENDING","data","payload","SUCCESS","err","FAILURE","useRemoteData","load","useReducer","PRISTIN","dispatch","useEffect","then","catch","tmbd","axios","create","baseURL","interceptors","request","use","config","method","params","api_key","process","getPopular","tmdb","get","Object","entries","map","keyValue","key","value","reduce","res","camelCase","MoviePreview","props","id","backdropPath","backdrop_path","title","overview","posterPath","poster_path","className","theme","root","backdrop","style","backgroundImage","poster","alt","src","Popular","JSON","stringify","movies","PopularContainer","Root","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4c64150.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"MoviePreview_title__1Mcyq\",\"overview\":\"MoviePreview_overview__33s9M\",\"poster\":\"MoviePreview_poster__2kRK1\",\"backdrop\":\"MoviePreview_backdrop__rXXpz\",\"root\":\"MoviePreview_root___0GIg\"};","enum RequestStatus{\n    PRISTIN,\n    PENDING,\n    FAILURE,\n    SUCCESS,\n}\n\nexport default RequestStatus\n","interface Action {\n    type: string;\n    payload?: any;\n    meta?: any;\n    err?: any;\n}\n\ninterface Reducer {\n    (state: any, action: Action): any;\n}\n\ninterface ReducerMap {\n    [key: string]: Reducer;\n}\n\nconst createReducer = (\n    handlers: ReducerMap,\n    defaultState = undefined,\n) => {\n    return (state = defaultState, action: Action): any => {\n        const {\n            type,\n        } = action\n\n        const handler = handlers[type]\n\n        if (!handler) {\n            return state\n        }\n\n        return handler(state, action)\n    }\n}\n\nexport default createReducer\n","import createReducer from 'utils/createReducer'\nimport RequestStatus from './RequestStatus'\n\nexport const START_LOADING = 'START_LOADING '\nexport const FINISH_LOADING = 'FINISH_LOADING'\nexport const FAILURE_LOADING = 'FAILURE_LOADING'\n\nconst reducer = createReducer({\n    [START_LOADING]: (state) => {\n        return {\n            ...state,\n           status: RequestStatus.PENDING,\n        }\n    },\n    [FINISH_LOADING]: (\n        state,\n        {\n            payload: {\n                data,\n            },\n        },\n    ) => {\n        return {\n            ...state,\n            status: RequestStatus.SUCCESS,\n            data,\n        }\n    },\n    [FAILURE_LOADING]: (\n            state,\n        {\n            err,\n        },\n    ) => {\n        return {\n            ...state,\n            status: RequestStatus.FAILURE,\n            err,\n        }\n    },\n})\n\nexport default reducer\n","import {\n    useReducer,\n    useEffect,\n} from 'react'\n\nimport reducer,{\n    START_LOADING,\n    FINISH_LOADING,\n    FAILURE_LOADING,\n} from './reducer'\nimport RequestStatus from './RequestStatus'\n\nexport interface Response<T> {\n    data?: T;\n    status: RequestStatus;\n    err?: Error;\n}\n\nconst useRemoteData = (\n    load: () => Promise<any>,\n): Response<any> => {\n    const [state, dispatch,] = useReducer(\n        reducer, {\n            status: RequestStatus.PRISTIN,\n        },\n    )\n\n    useEffect(()=>{\n        dispatch({\n            type: START_LOADING,\n        })\n        load()\n        .then((data)=>{\n            dispatch({\n                type: FINISH_LOADING,\n                payload: {\n                    data,\n                },\n            })\n        })\n        .catch((err) => {\n            dispatch({\n                type: FAILURE_LOADING,\n                err,\n            })\n        })\n    },\n    [\n        load,\n    ])\n\n    return state\n}\n\nexport default useRemoteData\n","import axios from 'axios'\n\nconst tmbd = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n})\n\ntmbd.interceptors.request.use((config) => {\n    const { method, params } = config\n\n    if (method === 'get') {\n        return {\n            ...config,\n            params: {\n                ...params,\n                api_key: process.env.REACT_APP_IMDB_V3, // eslint-disable-line\n            }\n        }\n    }\n\n    return config\n})\n\nexport default tmbd\n","import camelCase from 'lodash/camelCase'\n\nimport tmdb from './tmdb'\n\nexport interface Movie {\n    adult: boolean;\n    backdrop_path: string;\n    genre_ids: number[];\n    id: number;\n    original_language: string; // TODO: change to enum\n    original_title: string;\n    overview: string;\n    popularity: number;\n    poster_path: string;\n    release_date: string;\n    title: string;\n    video: boolean;\n    vote_average: number;\n    vote_count: number;\n}\n\nexport interface Response {\n    movies: Movie[];\n    page: number;\n    totalPages: number;\n    totalResults: number;\n}\n\nconst getPopular = (): Promise<Response | {}> => {\n    return tmdb.get('movie/popular')\n        .then(({\n            data,\n        })=>{\n            return Object.entries(data)\n                .map((keyValue) => {\n                    const [\n                        key, value,\n                    ] = keyValue\n\n                    if (key === 'results'){\n\n                        return ['movies',value,]\n                    }\n\n                    return keyValue\n                })\n                .reduce((res, [key, value,]) => {\n                    return {\n                        ...res,\n                        [camelCase(key)]: value,\n                    }\n                }, {})\n        })\n}\n\nexport default getPopular\n","import React from 'react'\n\nimport {\n    Movie,\n} from 'services/tmdb/getPopular'\n\nimport theme from './MoviePreview.module.css'\n\nconst MoviePreview = (props: Movie): JSX.Element => {\n    const {\n        id,\n        backdrop_path: backdropPath,\n        title,\n        overview,\n        poster_path: posterPath,\n    } = props\n    \n    return (\n        <div\n            className={theme.root}\n            key={`movie-${id}`}\n        >\n            <div\n                className={theme.backdrop}\n                style={{\n                    backgroundImage: `url(\"https://image.tmdb.org/t/p/w1920_and_h427_multi_faces${backdropPath}\")`,\n                }}\n            />\n            <div className={theme.title}>{title}</div>\n            <div className={theme.overview}>{overview}</div>\n            <img className={theme.poster} alt=\"poster\" src={`https://image.tmdb.org/t/p/w220_and_h330_face${posterPath}`} />\n        </div>\n    )\n}\n\nexport default MoviePreview\n","import React from 'react'\n\nimport * as useRemoteData from 'hooks/useRemoteData/useRemoteData'\nimport RequestStatus from 'hooks/useRemoteData/RequestStatus'\nimport * as getPopular from 'services/tmdb/getPopular'\nimport MoviePreview from 'MoviePreview'\n\nconst Popular = (props: useRemoteData.Response<getPopular.Response>): JSX.Element => {\n    const {\n        status,\n        data,\n        err,\n    } = props\n\n    if (status === RequestStatus.FAILURE) {\n        return (\n            <div>{JSON.stringify(err)}</div>\n        )\n    }\n\n    if (status === RequestStatus.PENDING || status === RequestStatus.PRISTIN) {\n        return (\n            <div>\n                loading\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {data?.movies.map(MoviePreview)}\n        </div>\n    )\n}\n\nexport default Popular\n","import React from 'react'\n\nimport useRemoteData from 'hooks/useRemoteData'\nimport getPopular from 'services/tmdb/getPopular'\n\nimport Popular from './Popular'\n\nconst PopularContainer = (): JSX.Element => {\n    const state = useRemoteData(getPopular)\n\n    return (\n        <Popular {...state} />\n    )\n}\n\nexport default PopularContainer\n","import React from 'react'\n\nimport Popular from './Popular'\n\nconst Root = () => {\n    return (\n        <div>\n            <Popular />\n        </div>\n    )\n}\n\nexport default Root\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport Root from './Root'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}